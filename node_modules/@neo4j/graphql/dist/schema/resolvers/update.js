"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../utils");
const translate_1 = require("../../translate");
const get_neo4j_resolve_tree_1 = __importDefault(require("../../utils/get-neo4j-resolve-tree"));
function updateResolver({ node, schemaComposer }) {
    function resolve(_root, _args, _context, info) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const context = _context;
            context.resolveTree = get_neo4j_resolve_tree_1.default(info);
            const [cypher, params] = translate_1.translateUpdate({ context, node });
            const executeResult = yield utils_1.execute({
                cypher,
                params,
                defaultAccessMode: "WRITE",
                context,
            });
            const nodeProjection = (_a = info.fieldNodes[0].selectionSet) === null || _a === void 0 ? void 0 : _a.selections.find((selection) => selection.kind === "Field" && selection.name.value === node.getPlural({ camelCase: true }));
            const nodeKey = (nodeProjection === null || nodeProjection === void 0 ? void 0 : nodeProjection.alias) ? nodeProjection.alias.value : (_b = nodeProjection === null || nodeProjection === void 0 ? void 0 : nodeProjection.name) === null || _b === void 0 ? void 0 : _b.value;
            return Object.assign({ info: Object.assign({ bookmark: executeResult.bookmark }, executeResult.statistics) }, (nodeProjection ? { [nodeKey]: executeResult.records.map((x) => x.this) } : {}));
        });
    }
    const relationFields = node.relationFields.length
        ? {
            connect: `${node.name}ConnectInput`,
            disconnect: `${node.name}DisconnectInput`,
            create: `${node.name}RelationInput`,
            delete: `${node.name}DeleteInput`,
        }
        : {};
    if (schemaComposer.has(`${node.name}ConnectOrCreateInput`)) {
        relationFields.connectOrCreate = `${node.name}ConnectOrCreateInput`;
    }
    return {
        type: `Update${node.getPlural({ camelCase: false })}MutationResponse!`,
        resolve,
        args: Object.assign({ where: `${node.name}Where`, update: `${node.name}UpdateInput` }, relationFields),
    };
}
exports.default = updateResolver;
//# sourceMappingURL=update.js.map