"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
function createPointElement({ resolveTree, field, variable, }) {
    const isArray = field.typeMeta.array;
    const _a = resolveTree.fieldsByTypeName[field.typeMeta.name], { crs } = _a, point = __rest(_a, ["crs"]);
    const fields = [];
    const dbFieldName = field.dbPropertyName || resolveTree.name;
    // Sadly need to select the whole point object due to the risk of height/z
    // being selected on a 2D point, to which the database will throw an error
    if (point) {
        fields.push(isArray ? "point:p" : `point: ${variable}.${dbFieldName}`);
    }
    if (crs) {
        fields.push(isArray ? "crs: p.crs" : `crs: ${variable}.${dbFieldName}.crs`);
    }
    const projection = isArray
        ? `[p in ${variable}.${dbFieldName} | { ${fields.join(", ")} }]`
        : `{ ${fields.join(", ")} }`;
    const cypher = [
        "apoc.cypher.runFirstColumn(",
        `'RETURN\nCASE ${variable}.${dbFieldName} IS NOT NULL\n\tWHEN true THEN ${projection}\n\tELSE NULL\nEND AS result',`,
        `{ ${variable}: ${variable} },`,
        "false",
        ")",
    ];
    return `${resolveTree.alias}: ${cypher.join("")}`;
}
exports.default = createPointElement;
//# sourceMappingURL=create-point-element.js.map